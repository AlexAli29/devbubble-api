// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: get_messages_by_chat_id.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMessagesByChatID = `-- name: GetMessagesByChatID :many
SELECT 
    "m"."id" AS "id",
    "m"."text",
    "m"."createdAt",
    "m"."userId",
    "u"."name" AS "senderName",
    ("m"."userId" = $1) AS "isFromMe"
FROM 
    "messages" "m"
JOIN 
    "users" "u" ON "m"."userId" = "u"."id"
WHERE 
    "m"."chatId" = $2
ORDER BY 
    "m"."createdAt" ASC
`

type GetMessagesByChatIDParams struct {
	UserId pgtype.UUID `json:"userId"`
	ChatId pgtype.UUID `json:"chatId"`
}

type GetMessagesByChatIDRow struct {
	ID         pgtype.UUID      `json:"id"`
	Text       string           `json:"text"`
	CreatedAt  pgtype.Timestamp `json:"createdAt"`
	UserId     pgtype.UUID      `json:"userId"`
	SenderName string           `json:"senderName"`
	IsFromMe   bool             `json:"isFromMe"`
}

func (q *Queries) GetMessagesByChatID(ctx context.Context, arg GetMessagesByChatIDParams) ([]GetMessagesByChatIDRow, error) {
	rows, err := q.db.Query(ctx, getMessagesByChatID, arg.UserId, arg.ChatId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByChatIDRow
	for rows.Next() {
		var i GetMessagesByChatIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UserId,
			&i.SenderName,
			&i.IsFromMe,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
