// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: get_user_by_id.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserById = `-- name: GetUserById :one
SELECT 
    u.id, 
    u."createdAt" , 
    u.email, 
    u.description, 
    u.name, 
    u."isVerified",
    json_agg(json_build_object('id', ut.id, 'text', ut.text, 'icon', ut.icon)) FILTER (WHERE ut.id IS NOT NULL) AS tags
FROM users u
LEFT JOIN user_user_tags uut ON u.id = uut."userId"
LEFT JOIN user_tags ut ON uut."userTagId" = ut.id
WHERE u.id = $1
GROUP BY u.id
`

type GetUserByIdRow struct {
	ID          pgtype.UUID      `json:"id"`
	CreatedAt   pgtype.Timestamp `json:"createdAt"`
	Email       string           `json:"email"`
	Description pgtype.Text      `json:"description"`
	Name        string           `json:"name"`
	IsVerified  pgtype.Bool      `json:"isVerified"`
	Tags        []byte           `json:"tags"`
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.Description,
		&i.Name,
		&i.IsVerified,
		&i.Tags,
	)
	return i, err
}

const getUserIsVerifiedEmailNameById = `-- name: GetUserIsVerifiedEmailNameById :one
SELECT "isVerified", "email", "name" FROM "users" WHERE "id" = $1
`

type GetUserIsVerifiedEmailNameByIdRow struct {
	IsVerified pgtype.Bool `json:"isVerified"`
	Email      string      `json:"email"`
	Name       string      `json:"name"`
}

func (q *Queries) GetUserIsVerifiedEmailNameById(ctx context.Context, id pgtype.UUID) (GetUserIsVerifiedEmailNameByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserIsVerifiedEmailNameById, id)
	var i GetUserIsVerifiedEmailNameByIdRow
	err := row.Scan(&i.IsVerified, &i.Email, &i.Name)
	return i, err
}
