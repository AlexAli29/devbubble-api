// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: get_private_chat.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPrivateChat = `-- name: GetPrivateChat :one
SELECT 
    "pc"."chatId" AS "chatId",
    "u"."id" AS "otherParticipantId",
    "u"."name" AS "otherParticipantName"
FROM 
    "chat_participants" "pc"
JOIN 
    "users" "u" ON "u"."id" = "pc"."userId"
WHERE 
    "pc"."chatId" = $2
    AND "pc"."userId" <> $1
`

type GetPrivateChatParams struct {
	UserId pgtype.UUID `json:"userId"`
	ChatId pgtype.UUID `json:"chatId"`
}

type GetPrivateChatRow struct {
	ChatId               pgtype.UUID `json:"chatId"`
	OtherParticipantId   pgtype.UUID `json:"otherParticipantId"`
	OtherParticipantName string      `json:"otherParticipantName"`
}

func (q *Queries) GetPrivateChat(ctx context.Context, arg GetPrivateChatParams) (GetPrivateChatRow, error) {
	row := q.db.QueryRow(ctx, getPrivateChat, arg.UserId, arg.ChatId)
	var i GetPrivateChatRow
	err := row.Scan(&i.ChatId, &i.OtherParticipantId, &i.OtherParticipantName)
	return i, err
}
