// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: auth_codes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAuthCode = `-- name: CheckAuthCode :one


WITH matched_user AS (
    SELECT auth_codes.user_id
    FROM auth_codes
    JOIN users ON auth_codes.user_id = users.id
    WHERE users.email = $1
      AND users.is_verified=true
      AND auth_codes.code = $2
      AND auth_codes.updated_at > (CURRENT_TIMESTAMP - INTERVAL '10 MINUTES')
    LIMIT 1
),
updated AS (
    UPDATE auth_codes
    SET code = floor(random() * 900000 + 100000) -- Generates a new code        
    WHERE user_id IN (SELECT user_id FROM matched_user)
    RETURNING user_id
)
SELECT user_id FROM updated
`

type CheckAuthCodeParams struct {
	Email string
	Code  int32
}

// Optional: retrieve the updated code
func (q *Queries) CheckAuthCode(ctx context.Context, arg CheckAuthCodeParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, checkAuthCode, arg.Email, arg.Code)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const createAuthCode = `-- name: CreateAuthCode :one
INSERT INTO auth_codes (user_id)
VALUES ($1)
RETURNING code
`

func (q *Queries) CreateAuthCode(ctx context.Context, userID pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, createAuthCode, userID)
	var code int32
	err := row.Scan(&code)
	return code, err
}

const updateAuthCode = `-- name: UpdateAuthCode :one
UPDATE auth_codes
SET code = $1  -- Replace $1 with the new code value
WHERE user_id = $2  -- Replace $2 with the user ID
RETURNING code
`

type UpdateAuthCodeParams struct {
	Code   int32
	UserID pgtype.UUID
}

func (q *Queries) UpdateAuthCode(ctx context.Context, arg UpdateAuthCodeParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateAuthCode, arg.Code, arg.UserID)
	var code int32
	err := row.Scan(&code)
	return code, err
}
