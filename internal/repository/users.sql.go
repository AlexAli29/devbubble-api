// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email)
VALUES ($1,$2)
RETURNING id, created_at, email, name, is_verified
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.Name,
		&i.IsVerified,
	)
	return i, err
}

const generateAuthCode = `-- name: GenerateAuthCode :one
WITH updated AS (
  UPDATE auth_codes
  SET code = floor(random() * 900000 + 100000)     
  FROM users  
  WHERE users.email = $1 
    AND auth_codes.user_id = users.id 
  RETURNING auth_codes.code
)
SELECT code FROM updated
`

func (q *Queries) GenerateAuthCode(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRow(ctx, generateAuthCode, email)
	var code int32
	err := row.Scan(&code)
	return code, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, email, name, is_verified FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.Name,
		&i.IsVerified,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :one
WITH matched_user AS (
  SELECT 
    u.id,
    ac.id as auth_code_id -- Получаем ID кода аутентификации для последующего обновления
  FROM 
    users u
    INNER JOIN auth_codes ac ON u.id = ac.user_id
  WHERE 
    u.email = $1 -- Плейсхолдер для параметра email
    AND ac.code = $2 -- Плейсхолдер для параметра кода аутентификации
    AND ac.created_at >= NOW() - INTERVAL '10 minutes'
),
updated_users AS (
  UPDATE users
  SET is_verified = TRUE
  FROM matched_user
  WHERE users.id = matched_user.id
  RETURNING users.id
),
updated_auth_code AS (
  UPDATE auth_codes
  SET 
    code = floor(random() * 900000 + 100000), -- Генерируем новый код
    updated_at = NOW() -- Обновляем время
  FROM matched_user
  WHERE auth_codes.id = matched_user.auth_code_id -- Обновляем существующий код аутентификации
  RETURNING auth_codes.user_id
)
SELECT id FROM updated_users
`

type VerifyUserParams struct {
	Email string
	Code  int32
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, verifyUser, arg.Email, arg.Code)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
