// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users_tags.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserTag = `-- name: AddUserTag :exec
INSERT INTO "user_user_tags" ("userId", "userTagId")
VALUES ($1, $2)
ON CONFLICT ("userId", "userTagId") DO NOTHING
`

type AddUserTagParams struct {
	UserId    pgtype.UUID `json:"userId"`
	UserTagId pgtype.UUID `json:"userTagId"`
}

func (q *Queries) AddUserTag(ctx context.Context, arg AddUserTagParams) error {
	_, err := q.db.Exec(ctx, addUserTag, arg.UserId, arg.UserTagId)
	return err
}

const deleteUserTag = `-- name: DeleteUserTag :exec
DELETE FROM "user_user_tags"
WHERE "userId" = $1 AND "userTagId" = $2
`

type DeleteUserTagParams struct {
	UserId    pgtype.UUID `json:"userId"`
	UserTagId pgtype.UUID `json:"userTagId"`
}

func (q *Queries) DeleteUserTag(ctx context.Context, arg DeleteUserTagParams) error {
	_, err := q.db.Exec(ctx, deleteUserTag, arg.UserId, arg.UserTagId)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  name = COALESCE(NULLIF($2::text, ''), name),
  description = COALESCE(NULLIF($3::text, ''), description)
WHERE id = $1
`

type UpdateUserParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Name, arg.Description)
	return err
}
